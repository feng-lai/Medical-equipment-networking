<?php

namespace app\api\model;

use app\api\validate\GoodsCategory as GoodsCategoryValidate;
use think\db\Query;
use think\exception\ValidateException;
use app\api\controller\Send;

/**
 * @method static Query where(mixed $field, mixed $op = null, mixed $condition = null)
 * @property integer is_delete
 * @property string delete_time
 */
class BaseModel extends \think\Model
{
    use Send;

    const DELETE_YES = 1;
    const DELETE_NO = 0;

    protected $resultSetType = 'collection';
    protected $updateTime = 'update_time';
    protected $createTime = 'create_time';
    protected $autoWriteTimestamp = 'datetime';
    protected $dateFormat = 'Y-m-d H:i:s';
    protected $quick = [];

    protected function loadData($data, $defaultData = [], $validateName = '')
    {
        if ($validateName !== false) {
            if (empty($validateName)) {
                preg_match('/\\\(\w+)$/', get_called_class(), $matches);
                $validateName = $matches[1];
            }
            $validateClass = 'app\api\validate\\' . $validateName;
            if (!class_exists($validateClass)) {
                $validateClass = 'app\common\validate\\' . $validateName;
            }
            $validate = new $validateClass();
            if (!$validate->check($data)) {
                throw new ValidateException($validate->getError());
            }
        }
        $fields = $this->getTableFields();
        foreach ($data as $key => $val) {
            if (in_array($key, $fields)) {
                $this->$key = $val;
            }
        }
        foreach ($fields as $field) {
            if (!isset($data[$field]) && isset($defaultData[$field])) {
                $this->$field = $defaultData[$field];
            }
        }
    }

    public function getAttr($name)
    {
        if (isset($this->quick[$name])) {
            $arr = explode(':', $this->quick[$name]);
            $getterName = $arr[0];
            $params = (isset($arr[1]) && $arr[1]) ? explode(',', $arr[1]) : [];
            if (in_array($getterName, ['text', 'date']) && empty($params[0])) {
                $tmp = preg_replace('/_' . $getterName . '$/', '', $name);
                $params[] = $tmp;
            }
            return call_user_func_array([$this, $getterName . 'QuickGetter'], $params);
        }
        return parent::getAttr($name); // TODO: Change the autogenerated stub
    }

    protected function textQuickGetter($field)
    {
        $className = get_class($this);
        $funName = 'get' . nameUnder2Hump($field, true) . 'Enum';
        $maps = $className::$funName();
        $value = $this->getData($field);
        return $maps[(string)$value] ?? '';
    }

    protected function dateQuickGetter($field)
    {
        $value = $this->getData($field);
        if (empty($value)) return '';
        return date('Y-m-d', strtotime($value));
    }

    protected function relationQuickGetter($relationName, $propertyName)
    {
        if ($this->$relationName) {
            return $this->$relationName->$propertyName;
        }
        return '';
    }

    public function softDelete()
    {
        $this->is_delete = self::DELETE_YES;
        $this->delete_time = date('Y-m-d H:i:s');
        $this->save();
    }

}
